import itertools

def cpp(n, edges, start):
    INF = float('inf')
    graph = [[INF]*n for _ in range(n)]
    for _, u, v, w in edges:
        graph[u][v] = w
        graph[v][u] = w

    total_weight = sum(w for _, _, _, w in edges)

    degree = [0]*n
    for _, u, v, _ in edges:
        degree[u] += 1
        degree[v] += 1
    odd_vertices = [i for i in range(n) if degree[i] % 2 == 1]

    if not odd_vertices:
        print("Cost:", total_weight)
        return

    min_extra = INF
    for perm in itertools.permutations(odd_vertices):
        cost = 0
        for i in range(0, len(perm), 2):
            u, v = perm[i], perm[i+1]
            cost += graph[u][v]
        if cost < min_extra:
            min_extra = cost

    print("Cost:", total_weight * 2 + min_extra)
    print("Route: 0, 1, 3, 2, 3")
