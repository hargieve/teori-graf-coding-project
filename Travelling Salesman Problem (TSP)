import itertools

def tsp(n, edges, start):
    # Build adjacency matrix
    INF = float('inf')
    graph = [[INF] * n for _ in range(n)]
    for _, u, v, w in edges:
        graph[u][v] = w
        graph[v][u] = w

    vertices = [i for i in range(n) if i != start]
    min_path = []
    min_cost = INF

    for perm in itertools.permutations(vertices):
        cost = 0
        k = start
        for j in perm:
            cost += graph[k][j]
            k = j
        cost += graph[k][start]
        if cost < min_cost:
            min_cost = cost
            min_path = [start] + list(perm) + [start]

    print("Cost:", min_cost)
    print("Route:", ", ".join(map(str, min_path)))


# Example input
n = 3
e = 4
edges = [
    (0, 1, 2, 10),
    (1, 2, 3, 5),
    (2, 3, 1, 7),
    (3, 3, 1, 2)
]
start = 1

tsp(n, edges, start)
